name: Update MMDB

on:
  schedule:
    - cron: '0 10 * * *' # 每天运行一次
  workflow_dispatch:

jobs:
  update-readme:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get file modification time
        run: |
          wget -O ipinfoLocal.mmdb "https://ipinfo.io/data/ipinfo_lite.mmdb?token=${{ secrets.API_TOKEN }}"

      - name: Git Configuration
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Commit changes to main
        run: |
          git add ipinfoLocal.mmdb
          git commit -m "Update MMDB with latest file modification time"
          git push --force origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Create tag
        id: create_tag
        run: |
          TAG_NAME=$(date -u +"%Y%m%d%H%M%S")
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists, deleting it from remote."
            git push --delete origin "$TAG_NAME"
            while git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME"; do
              echo "Waiting for tag $TAG_NAME to be deleted..."
              sleep 5
            done
          fi
          git tag $TAG_NAME
          git push --force origin $TAG_NAME
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Create release
        id: create_release
        run: |
          TAG_NAME=${{ steps.create_tag.outputs.TAG_NAME }}
          RELEASE_ID=$(gh release view "$TAG_NAME" --json id --jq '.id' || echo "null")
          if [ "$RELEASE_ID" != "null" ]; then
            echo "Release $TAG_NAME already exists, deleting it."
            gh release delete "$TAG_NAME" --yes
          fi
          gh release create "$TAG_NAME" --title "$TAG_NAME" --notes "Auto-generated release for $TAG_NAME" ipinfoLocal.mmdb
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
